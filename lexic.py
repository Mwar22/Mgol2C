#!/usr/bin/env python3
# -*- coding: utf-8 -*-


# Created by: Lucas de Jesus B.G
# Creation date: 13/04/2019


class Token:
    def __init__(self, token, lexema, tipo):
        self.__token = token
        self.__lexema = lexema
        self.__tipo = tipo

    def getTk(self):
        return self.__token


    def prt(self):
        print('Lexema: ' + self.__lexema + '  Token: '+self.__token)
        


class LexicAnalyser:

    #Alfabeto da linguagem e lista de estados finais, bem como o token respectivo à estes estados

    __alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-*/(){}<>=.;_"\t\n '
    __final_state = [1, 3, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
    __token = ['Num', 'Num', 'Num', 'Literal', 'id', 'Comentario', 'OPR', 'OPR', 'OPR', 'OPR', 'RCB', 'OPM', 'AB_P', 'FC_P', 'PTV']


    #   Formato: Cada linha representa um símbolo do alfabeto e as colunas os estados atuais.
    #   Os estados seguintes são representados pelos números em cada posição. -1 indica que não há transição em um dado estado e entrada.
    #   Nesta situação estados finais são reconhecidos, ou outros são tratados como erro.

    __transition_tbl = [
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,4,-1,4,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [9,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [1,1,3,3,6,6,6,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [1,1,3,3,6,6,6,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [1,1,3,3,6,6,6,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [1,1,3,3,6,6,6,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [1,1,3,3,6,6,6,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [1,1,3,3,6,6,6,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [1,1,3,3,6,6,6,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [1,1,3,3,6,6,6,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [1,1,3,3,6,6,6,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [1,1,3,3,6,6,6,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [17,-1,-1,-1,5,-1,5,7,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [17,-1,-1,-1,5,-1,5,7,-1,-1,10,-1,16,-1,-1,-1,-1,-1,-1,-1,-1],
        [17,-1,-1,-1,-1,-1,-1,7,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [17,-1,-1,-1,-1,-1,-1,7,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [18,-1,-1,-1,-1,-1,-1,7,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [19,-1,-1,-1,-1,-1,-1,7,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [10,-1,-1,-1,-1,-1,-1,7,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [-1,-1,-1,-1,-1,-1,-1,7,-1,-1,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [12,-1,-1,-1,-1,-1,-1,7,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [13,-1,-1,-1,-1,-1,-1,7,-1,-1,10,-1,15,-1,-1,-1,-1,-1,-1,-1,-1],
        [14,-1,-1,-1,-1,-1,-1,7,-1,-1,10,-1,14,14,-1,-1,-1,-1,-1,-1,-1],
        [-1,2,-1,-1,-1,-1,-1,7,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [20,-1,-1,-1,-1,-1,-1,7,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [-1,-1,-1,-1,-1,-1,-1,7,-1,9,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [7,-1,-1,-1,-1,-1,-1,8,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [0,-1,-1,-1,-1,-1,-1,7,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [0,-1,-1,-1,-1,-1,-1,7,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
        [0,-1,-1,-1,-1,-1,-1,7,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]



    def __init__(self, font_file):
        self.__font_file = font_file
        self.__cur_state = 0
        self.__char_index = 0
        self.__buffer = ''


    def getToken(self):
        

        #Lê um caractere e avança o carro
        self.__font_file.seek(self.__char_index)
        char = self.__font_file.read(1)
        self.__char_index += 1

        #Chegou no fim do arquivo?
        if char == '': 
            self.__cur_state = 0
            return Token('EOF', 'EOF','none')

        else:
            
            sym_row = self.__in_alphabet(char)  #   Obtém a posição do símbolo no alfabeto

            #se o caractere não pertence à linguagem
            if sym_row == -1:
                self.__cur_state = 0
                return Token('ERRO',  'Caractere <'+char+'> nao pertence a linguagem!','none')

            else:
               

                #obtém a transição
                next = self.__transition_tbl[sym_row][self.__cur_state]

                #se não existe transição partindo do estado atual
                if next == -1:
                    #O estado é final?
                    final = self.__is_final_state(self.__cur_state)
                    
                    if final != -1:
                        #volta o leitor
                        self.__char_index -= 1 


                        #cria um token e depois de resetar o buffer e o estado, o envia
                        tk = Token(self.__token[final], self.__buffer,'none')
                        self.__buffer = ''
                        self.__cur_state = 0
                        return tk

                    else:
                        self.__cur_state = 0
                        return Token('ERRO', 'Caractere <'+char+'> nao esperado!','none')
                else:

                    #concatena o caractere (apenas  se não for TAB,SALTO ou ESPAÇO) e muda de estado
                    if char != '\t' and char != '\n' and char != ' ':
                        self.__buffer += char;

                    self.__cur_state = next
          

            #executa novamente
            return self.getToken()
             


    #   Retorna -1 se não pertencer ao alfabeto ou a posição, caso o contrário.
    def __in_alphabet(self, char):
        for i in range(0, 80):
            if self.__alphabet[i] == char:
                return i
        return -1

    #   Retorna True se for estado final, False caso o contrário. (busca linear simples, poucos valores)
    def __is_final_state(self, state):
        for i in range (0,15):
            if self.__final_state[i] == state:
                return i

        return -1





f = open('workfile.txt', 'rb+')
la = LexicAnalyser(f)
tk = la.getToken()


while tk.getTk() != 'EOF':
    tk.prt()
    tk = la.getToken()

