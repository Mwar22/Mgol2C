#!/usr/bin/env python3
# -*- coding: utf-8 -*-


#Gramática
G = ["P' -> P", "P -> inicio V A", "V -> varinicio LV","LV -> D LV", "LV -> varfim;",
"D -> id TIPO;", "TIPO -> int", "TIPO -> real", "TIPO -> lit", "A -> ES A",
     "ES -> leia id;", "ES -> escreva ARG;", "ARG -> literal", "ARG -> num", "ARG -> id", 
     "A -> CMD A", "CMD -> id rcb LD;", "LD -> OPRD opm OPRD", "LD -> OPRD", "OPRD -> id", 
     "OPRD -> num", "A -> COND A", "COND -> CABEÇALHO CORPO", "CABEÇALHO -> se (EXP_R) entao",
     "EXP_R -> OPRD opr OPRD", "CORPO -> ES CORPO", "CORPO -> CMD CORPO", "CORPO -> COND CORPO", 
     "CORPO -> fimse", "A -> fim"]


# |betha| (numero de símbolos à direita de cada produção)
betha_sz = [3, 2, 2, 2, 3, 1, 1, 1, 2, 3, 3, 1, 1, 1, 2, 4, 3, 1, 1, 1, 2, 2, 5, 3, 2, 2, 2, 1,1]


#Vetor cujo index codifica o lado direito (o termo A, de A-> betha) de cada regra #de produção da gramática com o numero das colunas correspondente da tabela 
#GOTO
trans_tbl = [0, 1, 3, 3, 4, 5, 5, 5, 2, 6, 6, 7, 7, 7, 2, 8, 9, 9, 10, 10, 2, 11, 12, 14, 13, 13, 13, 13, 2 ]



#Linhas codificam os estados (0 à 58)
GOTO = [
[1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,5,-1,-1,-1,6,-1,7,-1,-1,8,13,-1,-1],
[-1,-1,-1,15,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,19,-1,-1,-1,6,-1,7,-1,-1,8,13,-1,-1],
[-1,-1,20,-1,-1,-1,6,-1,7,-1,-1,8,13,-1,-1],
[-1,-1,21,-1,-1,-1,6,-1,7,-1,-1,8,13,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,23,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,29,-1,30,-1,-1,31,13,28,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,34,16,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,36,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,42,43,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,29,-1,30,-1,-1,31,13,46,-1],
[-1,-1,-1,-1,-1,-1,29,-1,30,-1,-1,31,13,47,-1],
[-1,-1,-1,-1,-1,-1,29,-1,30,-1,-1,31,13,48,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,50,-1,-1,-1,49],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,56,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,58,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1]]



#Vetor cujo index codifica as colunas da matrix ACTION.
Term=["inicio","varinicio","varfim","PTV","id","int","real","lit","leia","escreva",
      "Literal", "Num","RCB","OPM","se","AB_P","FC_P","entao","OPR","fimse","fim","$"]

ACTION = [
[102,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0],
[-1,104,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,112,-1,-1,-1,110,111,-1,-1,-1,-1,114,-1,-1,-1,-1,-1,109,-1],
[-1,-1,117,-1,118,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,201],
[-1,-1,-1,-1,112,-1,-1,-1,110,111,-1,-1,-1,-1,114,-1,-1,-1,-1,-1,109,-1],
[-1,-1,-1,-1,112,-1,-1,-1,110,111,-1,-1,-1,-1,114,-1,-1,-1,-1,-1,109,-1],
[-1,-1,-1,-1,112,-1,-1,-1,110,111,-1,-1,-1,-1,114,-1,-1,-1,-1,-1,109,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,229],
[-1,-1,-1,-1,122,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,126,-1,-1,-1,-1,-1,124,125,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,127,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,112,-1,-1,-1,110,111,-1,-1,-1,-1,114,-1,-1,-1,-1,132,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,133,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,202,-1,-1,-1,202,202,-1,-1,-1,-1,202,-1,-1,-1,-1,-1,202,-1],
[-1,-1,117,-1,118,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,135,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,137,138,139,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,209],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,215],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,221],
[-1,-1,-1,140,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,141,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,212,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,213,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,214,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,144,-1,-1,-1,-1,-1,-1,145,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,222,-1,-1,-1,222,222,-1,-1,-1,-1,222,-1,-1,-1,-1,222,222,-1],
[-1,-1,-1,-1,112,-1,-1,-1,110,111,-1,-1,-1,-1,114,-1,-1,-1,-1,132,-1,-1],
[-1,-1,-1,-1,112,-1,-1,-1,110,111,-1,-1,-1,-1,114,-1,-1,-1,-1,132,-1,-1],
[-1,-1,-1,-1,112,-1,-1,-1,110,111,-1,-1,-1,-1,114,-1,-1,-1,-1,132,-1,-1],
[-1,-1,-1,-1,228,-1,-1,-1,228,228,-1,-1,-1,-1,228,-1,-1,-1,-1,228,228,-1],
[-1,-1,-1,-1,144,-1,-1,-1,-1,-1,-1,145,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,203,-1,-1,-1,203,203,-1,-1,-1,-1,203,-1,-1,-1,-1,-1,203,-1],
[-1,-1,-1,-1,204,-1,-1,-1,204,204,-1,-1,-1,-1,204,-1,-1,-1,-1,-1,204,-1],
[-1,-1,-1,151,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,206,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,207,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,208,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,210,-1,-1,-1,210,211,-1,-1,-1,-1,210,-1,-1,-1,-1,210,210,-1],
[-1,-1,-1,-1,211,-1,-1,-1,211,211,-1,-1,-1,-1,211,-1,-1,-1,-1,211,211,-1],
[-1,-1,-1,152,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,218,-1,-1,-1,-1,-1,-1,-1,-1,-1,153,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,219,-1,-1,-1,-1,-1,-1,-1,-1,-1,219,-1,-1,219,-1,219,-1,-1,-1],
[-1,-1,-1,220,-1,-1,-1,-1,-1,-1,-1,-1,-1,220,-1,-1,220,-1,220,-1,-1,-1],
[-1,-1,-1,-1,225,-1,-1,-1,225,225,-1,-1,-1,-1,225,-1,-1,-1,-1,225,225,-1],
[-1,-1,-1,-1,226,-1,-1,-1,226,226,-1,-1,-1,-1,226,-1,-1,-1,-1,226,226,-1],
[-1,-1,-1,-1,227,-1,-1,-1,227,227,-1,-1,-1,-1,227,-1,-1,-1,-1,227,227,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,154,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,155,-1,-1,-1],
[-1,-1,205,-1,205,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,216,-1,-1,-1,216,216,-1,-1,-1,-1,216,-1,-1,-1,-1,216,216,-1],
[-1,-1,-1,-1,144,-1,-1,-1,-1,-1,-1,145,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,157,-1,-1,-1,-1],
[-1,-1,-1,-1,144,-1,-1,-1,-1,-1,-1,145,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,217,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,223,-1,-1,-1,223,223,-1,-1,-1,-1,223,-1,-1,-1,-1,223,-1,-1],
[-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,224,-1,-1,-1,-1,-1]]

class Sintatico:

    def __init__(self, lexical_obj):
        #pilha
        self.__sp = 0        #index para o topo da pilha
        self.__stack = [0]    #pilha

        #salva o objeto controlador do analizador lexico
        self.__lexical_obj = lexical_obj

        #Lê o token 
        self.__token = lexical_obj.lexico()




    def printstack(self):
        print("stack:")
        for i in range (0, len(self.__stack)):
           print(str(i)+ ", ch:" +str(self.__stack[i]))
        print("\n")
                


    #Retorna o índice do token encontrado encontrado (para ter o acesso às 
    #colunas de ACTION

    def getActionIndex(self, token):
        l = token.getTk()    #string que identifica o tipo do token
        for i in range (0, len(Term)):
            if l == Term[i]:
                return i
        return -1
    
    
    #recebe como argumento um objeto do tipo analizador lexico.
    def sintatico(self):
        
        
        #obtem um índice(colunas) na tabela de ações
        a = self.getActionIndex(self.__token)

        #caso não encontre...
        if a == -1:
            print ("Erro, token desconhecido\n")
            return

        t = None;

        while (True):

            # s assume o valor que ocupa o topo da pilha.
            s = self.__stack[self.__sp]
            
            #obtem a ação 
            tmp = ACTION[s][a]
            
            
            #É uma operação de SHIFT
            if (tmp > 100 and tmp < 200 ):

                #t
                t = tmp%100;
                
                #empilha o estado especificado na ação (apenas a unidade e a dezena fazem parte deste numero)
                self.__stack.append(t)
                self.__sp += 1
                

                
                #lê o proximo token
                self.__token = self.__lexical_obj.lexico()

                #obtem um índice(colunas) na tabela de ações
                a = self.getActionIndex(self.__token)   
                
            
            #caso seja um REDUCE
            elif (tmp > 200): 
                
                prod = tmp%100;    #obtem o numero da produção (0 é equiv. à 2 na num. da folha)
                
                #Desempilha |betha| (subtrai 1 de prod pois o vetor betha_sz  começa a indexar à partir da produção 1
                for i in range(0, betha_sz[prod -1]):
                    self.__stack.pop()
                    self.__sp -= 1


                # faz ‘t’ ter o valor do topo da pilha
                t = self.__stack[self.__sp]
                

                #Empilha o estado a ser transitado (ind. pelo GOTO)
                self.__stack.append(GOTO[t][trans_tbl[prod-1]])
                self.__sp += 1
                 
                
                
                #Imprime a produção
                print (G[prod])
                
                
               

            #se  reconheceu
            elif tmp ==0:
                print(G[0])
                print("Uhuuu, reconheceu!\n")
                break
            else:
                print("erro\n");
                break;
            
            
        
        
        

